[Foundations of Data Science with Capstone at SMU, Summer 2023]
Day 6: Working with Different Data Types
========================================================
author: Dr. Jeho Park
date: 07/24/2023
autosize: true

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
```

DAY5 and LAB5 Review
========================================================

Day6 Quiz

Any questions?


Today's Topics
==============
- Data Import
- Parsing a Numeric Vector
- Parsing a Character Vector
- Character Encoding and Parsing
- Parsing Date Related Vector
- Parsing a File
- Writing to a File
- Tibbles vs Data Frames
- Tidy Data (1 / 2)


Data Import
==========
- readr package: read_csv, read_tsv, read_fsf, etc.
- read_csv options
- Parsing a vector


Essential read_csv options
========
- skip
- comments
- missing values
- Other things to be careful when you read a CSV file

[Hands-On] Import a CSV file
=================
1. From your RStudio, do "Pull Branches" to download 
2. Import the file and 
3. See summary of the data frame

Parsing a vector with parse_*() functions
================
__Recall that a vector is an atomic data structure that allows only one type of data in it__

Run the following examples:

```{r}
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_date(c("2010-01-01", "1979-10-14")))
```

Q: what does`str()` do?

```{r}
x <- parse_integer(c("123", "345", "abc", "123.45"))
x
```

Parsing a Numeric Vector
==============
Some possible issues with numbers:

1. People write decimal numbers differently in different parts of the world. See https://en.wikipedia.org/wiki/Decimal_separator.
2. Numbers often contain “grouping” characters to make them easier to read, like “1,000,000”, and these grouping characters vary around the world.  
3. Numbers are often surrounded by other characters that provide some context, like “$1000” or “10%”.  

Parsing a Numeric Vector: 
Issue #1 Decimal Mark and Issue #2 Grouping Mark Issue
==============
__Use `locale`__

```{r}
parse_number("1,234.56")

parse_number("1.234,56", locale = locale(decimal_mark = ",")) # Not what we want! How can we solve this issue?
```

Try `?locale` and `default_locale()` from your console. Which arguments are the number related arguments?

Solve the issue above with locale function.

Parsing a Numeric Vector: Issue #3 Non Numeric Character Issue
==============
__Use `parse_number()`__

```{r}
parse_number("$100.25")

parse_number("20%")

parse_number("It cost $123.45")

```

Parsing a String Vector
==========

```{r}
charToRaw("Korea")
```

Each *hexadecimal* number represents a byte of information:
- 4B --- encoding ---> "K"
- 6F --- encoding ---> "o"

__What? A byte? Hexadecimal?__ 

Number System: Binary, Decimal, Octal, and Hexadecimal
=========================
- Digital Units: Bits, Bytes, and Words
- Human Number System: Binary (base 2), Octal (base 8), Decimal (base 10), and Hexadecimal (base 16)

Q: How many different different numbers one bit can represent?  
Q: How many different different numbers two bits can represent?  
....  
Q: How many different different numbers four bits can represent?  
Q: How many different different numbers a byte can represent?

```{r}
2^8 
```


Character Encoding
=========================
English characters could be represented with 8 bits: ASCII   
How about Korean characters? So many combination of 초성, 중성, 종성: 조합형, 완성형 ---> Unicode

__Unicode Standard__  
UTF: Universal Coded Character Set + Transformation Format (Unicode Transmission Format)

UTF-8 uses 1 byte to 4 bytes to represent a character.  
UTF-8 can encode just about every character used by humans today, as well as many extra symbols (like emoji!).

```{r}
2^(4*8) # 4 bytes can represent this many different characters
```

Parsing Characters
===============
```{r}
s1 <- "El Ni\xf1o was particularly bad this year"
s2 <- "\xed\x95\x9c\xea\xb8\x80\xec\x9d\x80\x20\xeb\xa9\x8b\xec\xa0\xb8"
s3 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"

s1
s2
s3
```

The cases for s1 and s3 do not mean that the strings were broken or error. You need to change the encoding to manually match the character code.


```{r}
parse_character(s1, locale = locale(encoding = "Latin1"))

parse_character(s3, locale = locale(encoding = "Shift-JIS"))

parse_character(s2, locale = locale(encoding = "UTF-8"))
```

```{r}
guess_encoding(charToRaw(s1))
guess_encoding(charToRaw(s2))
guess_encoding(charToRaw(s3))
```

Regarding character encoding, read this article: https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/

Parsing Dates, date-times, and times
==============

- `parse_datetime()` expects an ISO8601 date-time. For more information about ISO8601 format, please read https://ko.wikipedia.org/wiki/ISO_8601.
- `parse_date()` expects a four digit year, a - or /, the month, a - or /, then the day like "2010-10-01"
- `parse_time()` expects the hour, :, minutes, optionally : and seconds, and an optional am/pm specifier like "01:10 am"


Date-Time Format and Code
===============
__Year__  
`%Y` (4 digits); 2021  
`%y` (2 digits); 00-69 -> 2000-2069, 70-99 -> 1970-1999.  

__Month__  
`%m` (2 digits); 07  
`%b` (abbreviated name, like “Jan”).  
`%B` (full name, “January”).  

__Day__  
`%d` (2 digits); 01  
`%e` (optional leading space).  

-------

__Time__  
`%H` 0-23 hour; 17 (= 5 pm)  
`%I` 0-12, must be used with %p.  
`%p` AM/PM indicator.  
`%M` minutes.  
`%S` integer seconds.  
`%OS` real seconds.  
`%Z` Time zone (as name, e.g. America/Chicago).   
`%z` (as offset from UTC, e.g. +0800).   

__Non-digits__   
`%.` skips one non-digit character.   
`%*` skips any number of non-digits.   

[Hands-On] Guess the year, month and day
=================

`parse_date("01/02/15", "%m/%d/%y")`   

`parse_date("01/02/15", "%d/%m/%y")`   

`parse_date("01/02/15", "%y/%m/%d")`   

Parsing a File
==============

The readr package automatically guesses the type of each column by parsing the first 1000 lines:

```{r}
guess_parser("2010-10-01")

guess_parser("15:01")

guess_parser(c("TRUE", "FALSE"))

guess_parser(c("1", "5", "9"))

guess_parser(c("12,352,561"))


```

Test the following readr problem:

```{r}
challenge <- read_csv(readr_example("challenge.csv"))
head(challenge)
tail(challenge)
```

What is the issue here? and How can you solve this?

```{r}
challenge <- read_csv(
  readr_example("challenge.csv"), 
  col_types = cols(
    x = col_double(),
    y = col_date()
  )
)
head(challenge)
tail(challenge)
```

Writing to a File
=============
When you write your well parsed data using custom options to a CSV file, don't forget that the information is no longer preserved. 

This means that when you read the CSV file back, you have to specify how to read each column again in your script.

```{r}
write_csv(challenge, "./challenge2.csv") # 
challenge2 <- read_csv("challenge2.csv")

```

Tibbles
========

>> Tibbles are data frames, but they contain more information and have additional characteristics than the old data frames. 

Let's see iris data frame

```{r}
iris
class(iris) # data.frame
```

Create a tibble from a data.frame

```{r}
iris_tibble <- as_tibble(iris)
class(iris_tibble) # tbl_df
```

Differences of a Tibble from a Data Frame
===========
Printing (console output) 

```{r}
class(nycflights13::flights) # tibble
nycflights13::flights %>% 
# print(n = 10)
 print(n = 10, width = Inf) 
```

A Tibble from a Data Frame
===========
Subsetting

```{r}
# Extract by name using $
iris_tibble$Species

# Extract by position using [[]]
iris_tibble[[5]]
iris[[5]]
iris_tibble[1]
iris[1]
```

Below code shows how you can use subsetting with pipe:
```{r}
iris %>% .$Species
iris_tibble %>% 
  .$Species
```

Lab7
===========
Exercise 11.2.2: Do all the problems except #3

Exercise 11.3.5: #4, #7   




