[Foundations of Data Science with Capstone at SMU, Summer 2023]
Day 7: Working with Different Data Types (Tidy Data)
========================================================
author: Dr. Jeho Park
date: 
autosize: true

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
library(tidyverse)
```

DAY6 and LAB6 Review
========================================================

Day7 Quiz

Lab4_1, Lab4_2 solution 

Any Questions?


Today's Topics
===========
- Tidy Data
- Vectorized operations
- Pivoting data
- Making tidy data
- Strings
- Factors

Tidy Data
============
The number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. 

```{r}
table1
table2
table3
table4a
table4b
```

Tidy Data Rules
==========
There are three interrelated rules which make a dataset tidy:

- Each variable must have its own column. (각 변수는 반드시  자신의 열에 있어야 한다.)
   - 하나의 변수에 해당하는 값이 여러개의 열에 나뉘어져 들어가 있으면 안 됨.

- Each observation must have its own row. (각 관측객체는  반드시 자신의 행에 있어야 한다.)
  - 관측객체가 하나 이상의 행에 나뉘어져 있으면 안됨.

- Each value must have its own cell. (각 관측값마다 반드시 자신의 쎌 하나가 있어야 한다.)
  - 하나의 관측값이 여러개의 쎌에 나타나면 안된다.

![Tidy Data](images/tidy-1.png)

Why Tidy Data is Better and Recommended?
==============

1. There’s a general advantage to picking one consistent way of storing data. (일관된 데이터 구조를 저장할 때의 장점이 있음)

2. There’s a specific advantage to placing variables in columns because it allows R’s vectorised nature to shine. (변수가 열에 배치될때 R의 벡터화된 계산을 하기가 용이해 진다.)

[Side Note] What is a __vectorized operation__?

Vectorized Operations
===============

Given two numeric vectors, `x = (1, 2, 3, 4)` and `y = (5, 6, 7, 8)`,

```{r}
x <- 1:4
y <- 5:8 
```


Calculate `z`, an element-wise sum of x and y, using a `for` loop:
```{r}
z <- 0 # initialize z
for (i in 1:4) {
  z[i] = x[i] + y[i] # z[3] = x[3] + y[3] 
}
z
```

```{r}
z[1] <- x[1] + y[1]
z[2] <- x[2] + y[2]
z[3] <- x[3] + y[3]
z[4] <- x[4] + y[4]
z
```


Do the same thing using R's vectorized operation:

```{r}
z1 <- x + y # vectorized operation
z1
```



Examples of Easy Tidy Data Manipulations
===========

```{r}
table1 %>% 
  mutate(rate = cases / population * 10000) 
```


```{r}
# Compute cases per year
table1 %>% 
  count(year, wt = cases)
```

```{r}
# Visualise changes over time
# library(ggplot2)
ggplot(table1, aes(x = year, y = cases)) + 
  geom_line(aes(group = country), colour = "grey50") + 
  geom_point(aes(colour = country))
```

Pivoting
========
__Most real world data are untidy__

__The first thing you need to do is to figure out what the variables and observations are in your dataset.__

__And then the next step is to resolve one of two common problems:__

- One variable might be spread across multiple columns.

- One observation might be scattered across multiple rows.

>> To fix these problems, you’ll need the two most important functions in tidyr: `pivot_longer()` and `pivot_wider()`.

Pivot Longer
===========

__Issue: Some of the column names are values, not variable names__

Let's look at the `table4a`:

```{r}
table4a
```

(1) Find the column names that are values  
(2) Come up with a column name to hold the values used as column names   
(3) Name a new column to move the observation values under.   
(4) Use pivot_longer to rearrange the columns and row values.   

```{r}
table4a_tidy <- 
  table4a %>% 
    pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
table4a_tidy # display the result
```

This will make the tibble longer. So, the function name, `pivot_longer`

Pivot Longer
===========
![Pivot Longer](images/tidy-9.png)

[Hands-On] Making data tidy
=================
Make table4b tidy using pivot_longer

```{r}
table4b_tidy <- 
  table4b %>% 
    pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "population")
table4b_tidy
```

Combining two tibbles
=============
Try `left_join` to combine two tibbles having columns that are common.

```{r}
left_join(table4a_tidy, table4b_tidy)
```

Pivot Wider
===========
Let's look at the table2 case.

```{r}
table2
```

__Issue: one of the columns (`type`) holds an observation whose values are scattered across multiple rows.__

(1) Find the column that take variable names from. (e.g., type)  
(2) Find the column that take values from. (e.g., count)  

Pivot Wider
============

```{r}
table2_tidy <-
  table2 %>%
      pivot_wider(names_from = type, values_from = count)
table2_tidy
```

![Pivot Wider](images/tidy-8.png)



[Hands-On] Separating and Uniting
============

(1) Separate a variable into multiple variables

```{r}
# Separate
table3 # see rate column

table3_tidy <- 
  table3 %>% 
  separate(rate, into = c("cases", "population"), sep = "/")
table3_tidy
  
```

```{r}
table3_tidy %>% 
  separate(year, into = c("century", "year"), sep = 2)
```

(2) Combine (unite) multiple variables into one variable

```{r}
# Unite
table5 # 

table5_tidy <- 
  table5 %>% 
  unite(new, century, year, sep = "")
table5_tidy
```


Strings
===========
__String Basics with `stringr` package__

- Use " " for strings

- "He said \"what?\""

- \ is escape 
```{r}
str <- "He said \"what?\"" # error?
str
writeLines(str) # to remove the escape character from the output
```

- Use str_c() to combine strings
```{r}
str_c("x", "y", "z")
str_c("prefix-", c("a", "b", "c"), "-suffix") # vectorized
```

- Use str_sub to subset strings
```{r}
x <- c("Apple", "Banana", "Pear")
str_sub(x, 2, 3)
```

Factors
============
Factors are an R data type used for categorical variables, variables that have a fixed and known set of possible values. 

We will use `forcats` package for factors, which is also included in the `tidyverse` package.

Creating Factors
===============
```{r}
x1 <- c("Dec", "Apr", "Jan", "Mar")
```

Let's sort it to see if the months can be sorted from January to December:
```{r}
sort(x1) # alphabetical order!?
```

We need __levels__ in factor.
```{r}
month_levels <- c(
  "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
sort(month_levels)
```

```{r}
y1 <- factor(x1, levels = month_levels)
y1
```

Creating Factors (cont)
==========
What if we don't set the levels?
```{r}
x1 %>% 
  factor(levels = month_levels) %>% 
  sort()
```

Factor Usage
===========
__General Social Survey__

Let's see forcats::gss_cat dataset and look at the types of each variable.
```{r}
gss_cat  # a tibble
``` 

[Hands-On] Barplot of a factor
===================
From the `gss_cat` dataset, visualize distribution of `race` in the dataset.

```{r}
ggplot(gss_cat) +
  geom_bar(mapping = aes(x = race))
```

What are the top 10 most common `relig` in this survey? 

```{r}
gss_cat %>% 
  count(relig) %>% 
  arrange(desc(n)) %>% 
  head(10)
```

Modifying factor order
===================
Let's look at the following visualization showing the number of hours for watching TV on average by `relig` variable:

```{r}
relig_summary <- 
  gss_cat %>%
    group_by(relig) %>%
    summarise(
      age = mean(age, na.rm = TRUE),
      tvhours = mean(tvhours, na.rm = TRUE),
      n = n()
    )
#> `summarise()` ungrouping output (override with `.groups` argument)

ggplot(relig_summary, aes(tvhours, relig)) + 
  geom_point()
```

It is hard to compare! You often want to reorder the factor in visualization.

Look at the fct_reoder function below:

```{r}
ggplot(relig_summary, aes(tvhours, fct_reorder(relig, tvhours))) +
  geom_point()
```

`fct_reorder` takes two arguments: (1) the factor you want to reorder and (2) a numeric vector you want to use as the value for reordering. 

A classic way to ordering factors
=============
__Use `ordered()` function__

```{r}
Births2015 <- read_csv("Births2015.csv")
Births2015$wday <- ordered(Births2015$wday, levels = c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"))
ggplot(data = Births2015) +
  #  geom_point() +
  geom_boxplot(aes(x = wday, y = births))

```


Modifying factor levels
===================
Sometime, you want to simplify the levels of factors. Let's see the count of `partyid` from the `gss_cat` tibble.

```{r}
gss_cat %>% count(partyid)
```

`fct_collapse()` recode the factors and collapse multiple levels into one. 

```{r}
gss_cat %>%
  mutate(partyid = fct_collapse(partyid,
    other = c("No answer", "Don't know", "Other party"),
    rep = c("Strong republican", "Not str republican"),
    ind = c("Ind,near rep", "Independent", "Ind,near dem"),
    dem = c("Not str democrat", "Strong democrat")
  )) %>%
  count(partyid)
```

Homework
========
14.3 Matching patterns with regular expressions 
  - 한글사이트 https://bookdown.org/sulgi/r4ds/regular-expressions.html
14.4 Tools

Day 7 Lab
========
- 12.3.3: #2
- 14.2.5: #4, #5
- 15.4.1: #1


